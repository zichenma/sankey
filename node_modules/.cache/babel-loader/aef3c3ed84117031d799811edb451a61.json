{"ast":null,"code":"var sankeyModule = function sankeyModule(d3) {\n  var sankey = {},\n      nodeWidth = 24,\n      nodePadding = 8,\n      size = [1, 1],\n      nodes = [],\n      links = [];\n\n  sankey.nodeWidth = function (_) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  sankey.nodePadding = function (_) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  sankey.nodes = function (_) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  sankey.links = function (_) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  sankey.size = function (_) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n  sankey.layout = function (iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.relayout = function () {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.link = function () {\n    var curvature = .5;\n\n    function link(d) {\n      var x0 = d.source.x + d.source.dx,\n          x1 = d.target.x,\n          xi = d3.interpolateNumber(x0, x1),\n          x2 = xi(curvature),\n          x3 = xi(1 - curvature),\n          y0 = d.source.y + d.sy + d.dy / 2,\n          y1 = d.target.y + d.ty + d.dy / 2;\n      return \"M\" + x0 + \",\" + y0 + \"C\" + x2 + \",\" + y0 + \" \" + x3 + \",\" + y1 + \" \" + x1 + \",\" + y1;\n    }\n\n    link.curvature = function (_) {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  }; // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n\n\n  function computeNodeLinks() {\n    nodes.forEach(function (node) {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach(function (link) {\n      var source = link.source,\n          target = link.target;\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  } // Compute the value (size) of each node by summing the associated links.\n\n\n  function computeNodeValues() {\n    nodes.forEach(function (node) {\n      node.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));\n    });\n  } // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n\n\n  function computeNodeBreadths() {\n    var remainingNodes = nodes,\n        nextNodes,\n        x = 0;\n\n    while (remainingNodes.length) {\n      nextNodes = [];\n      remainingNodes.forEach(function (node) {\n        node.x = x;\n        node.dx = nodeWidth;\n        node.sourceLinks.forEach(function (link) {\n          if (nextNodes.indexOf(link.target) < 0) {\n            nextNodes.push(link.target);\n          }\n        });\n      });\n      remainingNodes = nextNodes;\n      ++x;\n    } //\n\n\n    moveSinksRight(x);\n    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n  }\n\n  function moveSourcesRight() {\n    nodes.forEach(function (node) {\n      if (!node.targetLinks.length) {\n        node.x = d3.min(node.sourceLinks, function (d) {\n          return d.target.x;\n        }) - 1;\n      }\n    });\n  }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function (node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function (node) {\n      node.x *= kx;\n    });\n  }\n\n  function computeNodeDepths(iterations) {\n    var nodesByBreadth = d3.nest().key(function (d) {\n      return d.x;\n    }).sortKeys(d3.ascending).entries(nodes).map(function (d) {\n      return d.values;\n    }); //\n\n    initializeNodeDepth();\n    resolveCollisions();\n\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxRightToLeft(alpha *= .99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeDepth() {\n      var ky = d3.min(nodesByBreadth, function (nodes) {\n        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n      });\n      nodesByBreadth.forEach(function (nodes) {\n        nodes.forEach(function (node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n      links.forEach(function (link) {\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      nodesByBreadth.forEach(function (nodes, breadth) {\n        nodes.forEach(function (node) {\n          if (node.targetLinks.length) {\n            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedSource(link) {\n        return center(link.source) * link.value;\n      }\n    }\n\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth.slice().reverse().forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.sourceLinks.length) {\n            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedTarget(link) {\n        return center(link.target) * link.value;\n      }\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function (nodes) {\n        var node,\n            dy,\n            y0 = 0,\n            n = nodes.length,\n            i; // Push any overlapping nodes down.\n\n        nodes.sort(ascendingDepth);\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        } // If the bottommost node goes outside the bounds, push it back up.\n\n\n        dy = y0 - nodePadding - size[1];\n\n        if (dy > 0) {\n          y0 = node.y -= dy; // Push any overlapping nodes back up.\n\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    function ascendingDepth(a, b) {\n      return a.y - b.y;\n    }\n  }\n\n  function computeLinkDepths() {\n    nodes.forEach(function (node) {\n      node.sourceLinks.sort(ascendingTargetDepth);\n      node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(function (node) {\n      var sy = 0,\n          ty = 0;\n      node.sourceLinks.forEach(function (link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function (link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a, b) {\n      return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a, b) {\n      return a.target.y - b.target.y;\n    }\n  }\n\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n\n  function value(link) {\n    return link.value;\n  }\n\n  return sankey;\n};\n\nexport default sankeyModule;","map":{"version":3,"sources":["/home/voluteuser2/Desktop/react-d3-particle/src/particle/sankey.js"],"names":["sankeyModule","d3","sankey","nodeWidth","nodePadding","size","nodes","links","_","arguments","length","layout","iterations","computeNodeLinks","computeNodeValues","computeNodeBreadths","computeNodeDepths","computeLinkDepths","relayout","link","curvature","d","x0","source","x","dx","x1","target","xi","interpolateNumber","x2","x3","y0","y","sy","dy","y1","ty","forEach","node","sourceLinks","targetLinks","push","value","Math","max","sum","remainingNodes","nextNodes","indexOf","moveSinksRight","scaleNodeBreadths","moveSourcesRight","min","kx","nodesByBreadth","nest","key","sortKeys","ascending","entries","map","values","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","ky","i","breadth","weightedSource","center","slice","reverse","weightedTarget","n","sort","ascendingDepth","a","b","ascendingTargetDepth","ascendingSourceDepth"],"mappings":"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","sourcesContent":["let sankeyModule = function(d3) {\r\n  var sankey = {},\r\n      nodeWidth = 24,\r\n      nodePadding = 8,\r\n      size = [1, 1],\r\n      nodes = [],\r\n      links = [];\r\n\r\n  sankey.nodeWidth = function(_) {\r\n    if (!arguments.length) return nodeWidth;\r\n    nodeWidth = +_;\r\n    return sankey;\r\n  };\r\n\r\n  sankey.nodePadding = function(_) {\r\n    if (!arguments.length) return nodePadding;\r\n    nodePadding = +_;\r\n    return sankey;\r\n  };\r\n\r\n  sankey.nodes = function(_) {\r\n    if (!arguments.length) return nodes;\r\n    nodes = _;\r\n    return sankey;\r\n  };\r\n\r\n  sankey.links = function(_) {\r\n    if (!arguments.length) return links;\r\n    links = _;\r\n    return sankey;\r\n  };\r\n\r\n  sankey.size = function(_) {\r\n    if (!arguments.length) return size;\r\n    size = _;\r\n    return sankey;\r\n  };\r\n\r\n  sankey.layout = function(iterations) {\r\n    computeNodeLinks();\r\n    computeNodeValues();\r\n    computeNodeBreadths();\r\n    computeNodeDepths(iterations);\r\n    computeLinkDepths();\r\n    return sankey;\r\n  };\r\n\r\n  sankey.relayout = function() {\r\n    computeLinkDepths();\r\n    return sankey;\r\n  };\r\n\r\n  sankey.link = function() {\r\n    var curvature = .5;\r\n\r\n    function link(d) {\r\n      var x0 = d.source.x + d.source.dx,\r\n          x1 = d.target.x,\r\n          xi = d3.interpolateNumber(x0, x1),\r\n          x2 = xi(curvature),\r\n          x3 = xi(1 - curvature),\r\n          y0 = d.source.y + d.sy + d.dy / 2,\r\n          y1 = d.target.y + d.ty + d.dy / 2;\r\n      return \"M\" + x0 + \",\" + y0\r\n           + \"C\" + x2 + \",\" + y0\r\n           + \" \" + x3 + \",\" + y1\r\n           + \" \" + x1 + \",\" + y1;\r\n    }\r\n\r\n    link.curvature = function(_) {\r\n      if (!arguments.length) return curvature;\r\n      curvature = +_;\r\n      return link;\r\n    };\r\n\r\n    return link;\r\n  };\r\n\r\n  // Populate the sourceLinks and targetLinks for each node.\r\n  // Also, if the source and target are not objects, assume they are indices.\r\n  function computeNodeLinks() {\r\n    nodes.forEach(function(node) {\r\n      node.sourceLinks = [];\r\n      node.targetLinks = [];\r\n    });\r\n    links.forEach(function(link) {\r\n      var source = link.source,\r\n          target = link.target;\r\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\r\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\r\n      source.sourceLinks.push(link);\r\n      target.targetLinks.push(link);\r\n    });\r\n  }\r\n\r\n  // Compute the value (size) of each node by summing the associated links.\r\n  function computeNodeValues() {\r\n    nodes.forEach(function(node) {\r\n      node.value = Math.max(\r\n        d3.sum(node.sourceLinks, value),\r\n        d3.sum(node.targetLinks, value)\r\n      );\r\n    });\r\n  }\r\n\r\n  // Iteratively assign the breadth (x-position) for each node.\r\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\r\n  // nodes with no incoming links are assigned breadth zero, while\r\n  // nodes with no outgoing links are assigned the maximum breadth.\r\n  function computeNodeBreadths() {\r\n    var remainingNodes = nodes,\r\n        nextNodes,\r\n        x = 0;\r\n\r\n    while (remainingNodes.length) {\r\n      nextNodes = [];\r\n      remainingNodes.forEach(function(node) {\r\n        node.x = x;\r\n        node.dx = nodeWidth;\r\n        node.sourceLinks.forEach(function(link) {\r\n          if (nextNodes.indexOf(link.target) < 0) {\r\n            nextNodes.push(link.target);\r\n          }\r\n        });\r\n      });\r\n      remainingNodes = nextNodes;\r\n      ++x;\r\n    }\r\n\r\n    //\r\n    moveSinksRight(x);\r\n    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\r\n  }\r\n\r\n  function moveSourcesRight() {\r\n    nodes.forEach(function(node) {\r\n      if (!node.targetLinks.length) {\r\n        node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  function moveSinksRight(x) {\r\n    nodes.forEach(function(node) {\r\n      if (!node.sourceLinks.length) {\r\n        node.x = x - 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  function scaleNodeBreadths(kx) {\r\n    nodes.forEach(function(node) {\r\n      node.x *= kx;\r\n    });\r\n  }\r\n\r\n  function computeNodeDepths(iterations) {\r\n    var nodesByBreadth = d3.nest()\r\n        .key(function(d) { return d.x; })\r\n        .sortKeys(d3.ascending)\r\n        .entries(nodes)\r\n        .map(function(d) { return d.values; });\r\n\r\n    //\r\n    initializeNodeDepth();\r\n    resolveCollisions();\r\n    for (var alpha = 1; iterations > 0; --iterations) {\r\n      relaxRightToLeft(alpha *= .99);\r\n      resolveCollisions();\r\n      relaxLeftToRight(alpha);\r\n      resolveCollisions();\r\n    }\r\n\r\n    function initializeNodeDepth() {\r\n      var ky = d3.min(nodesByBreadth, function(nodes) {\r\n        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\r\n      });\r\n\r\n      nodesByBreadth.forEach(function(nodes) {\r\n        nodes.forEach(function(node, i) {\r\n          node.y = i;\r\n          node.dy = node.value * ky;\r\n        });\r\n      });\r\n\r\n      links.forEach(function(link) {\r\n        link.dy = link.value * ky;\r\n      });\r\n    }\r\n\r\n    function relaxLeftToRight(alpha) {\r\n      nodesByBreadth.forEach(function(nodes, breadth) {\r\n        nodes.forEach(function(node) {\r\n          if (node.targetLinks.length) {\r\n            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\r\n            node.y += (y - center(node)) * alpha;\r\n          }\r\n        });\r\n      });\r\n\r\n      function weightedSource(link) {\r\n        return center(link.source) * link.value;\r\n      }\r\n    }\r\n\r\n    function relaxRightToLeft(alpha) {\r\n      nodesByBreadth.slice().reverse().forEach(function(nodes) {\r\n        nodes.forEach(function(node) {\r\n          if (node.sourceLinks.length) {\r\n            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\r\n            node.y += (y - center(node)) * alpha;\r\n          }\r\n        });\r\n      });\r\n\r\n      function weightedTarget(link) {\r\n        return center(link.target) * link.value;\r\n      }\r\n    }\r\n\r\n    function resolveCollisions() {\r\n      nodesByBreadth.forEach(function(nodes) {\r\n        var node,\r\n            dy,\r\n            y0 = 0,\r\n            n = nodes.length,\r\n            i;\r\n\r\n        // Push any overlapping nodes down.\r\n        nodes.sort(ascendingDepth);\r\n        for (i = 0; i < n; ++i) {\r\n          node = nodes[i];\r\n          dy = y0 - node.y;\r\n          if (dy > 0) node.y += dy;\r\n          y0 = node.y + node.dy + nodePadding;\r\n        }\r\n\r\n        // If the bottommost node goes outside the bounds, push it back up.\r\n        dy = y0 - nodePadding - size[1];\r\n        if (dy > 0) {\r\n          y0 = node.y -= dy;\r\n\r\n          // Push any overlapping nodes back up.\r\n          for (i = n - 2; i >= 0; --i) {\r\n            node = nodes[i];\r\n            dy = node.y + node.dy + nodePadding - y0;\r\n            if (dy > 0) node.y -= dy;\r\n            y0 = node.y;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    function ascendingDepth(a, b) {\r\n      return a.y - b.y;\r\n    }\r\n  }\r\n\r\n  function computeLinkDepths() {\r\n    nodes.forEach(function(node) {\r\n      node.sourceLinks.sort(ascendingTargetDepth);\r\n      node.targetLinks.sort(ascendingSourceDepth);\r\n    });\r\n    nodes.forEach(function(node) {\r\n      var sy = 0, ty = 0;\r\n      node.sourceLinks.forEach(function(link) {\r\n        link.sy = sy;\r\n        sy += link.dy;\r\n      });\r\n      node.targetLinks.forEach(function(link) {\r\n        link.ty = ty;\r\n        ty += link.dy;\r\n      });\r\n    });\r\n\r\n    function ascendingSourceDepth(a, b) {\r\n      return a.source.y - b.source.y;\r\n    }\r\n\r\n    function ascendingTargetDepth(a, b) {\r\n      return a.target.y - b.target.y;\r\n    }\r\n  }\r\n\r\n  function center(node) {\r\n    return node.y + node.dy / 2;\r\n  }\r\n\r\n  function value(link) {\r\n    return link.value;\r\n  }\r\n\r\n  return sankey;\r\n};\r\n\r\nexport default sankeyModule;"]},"metadata":{},"sourceType":"module"}